package younah.TodoRefactor.domain.todo.service;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import younah.TodoRefactor.domain.todo.dto.TodoDto;
import younah.TodoRefactor.domain.todo.entity.Todo;
import younah.TodoRefactor.domain.todo.repository.TodoRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GetTodosService {
    private final TodoRepository todoRepo;

    @Transactional(readOnly = true)
    public Page<TodoDto> getTodos(Pageable pageable,
                                  Todo.TodoStatus todoStatus,
                                  LocalDateTime startAt,
                                  LocalDateTime endAt) {

        Page<Todo> todos = todoRepo
                .findByDates(startAt, endAt, pageable);

        //TODO filter
        if (todoStatus == Todo.TodoStatus.TODO_COMPLETE){
            return findCompleteTodos(todos, pageable);
        }else {
            return findBeforeTodos(todos, pageable);
        }
    }

    public Page<TodoDto> findCompleteTodos(Page<Todo> todos, Pageable pageable) {
        List<TodoDto> list = todos.getContent().stream()
                .filter(todo
                        -> todo.getStatus() == Todo.TodoStatus.TODO_COMPLETE
                                && todo.getDeletedAt() == null)
                .map(TodoDto::fromEntity)
                .collect(Collectors.toList());
        return new PageImpl<>(list, pageable, todos.getTotalElements());
    }

    public Page<TodoDto> findBeforeTodos(Page<Todo> todos, Pageable pageable) {
        List<TodoDto> list = todos.getContent().stream()
                .filter(todo
                        -> todo.getStatus() == Todo.TodoStatus.TODO_BEFORE
                                && todo.getDeletedAt() == null)
                .map(TodoDto::fromEntity)
                .collect(Collectors.toList());
        return new PageImpl<>(list, pageable, todos.getTotalElements());
    }
    //PageImpl<>(리ㅣ스트 데이터, pageable 객체, 전체 데이터 개수)
    //Page 타입으로 감싸기 때문에 .. page에 대한 정보와 같이 보내려는 데이터를 .. 담아야 함 ... ㅋㅋ...ㅋ...
    
    
}